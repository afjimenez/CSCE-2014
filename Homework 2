#include<iostream>
#include<typeinfo>
#include<string.h>
#include<vector>

using namespace std;

class Token
{
private:
    enum token_type{letter,integer,op,eq,openbrace,closebrace,invalid};
    token_type type;
    string token;
    int priority;
public:
    Token()		//The default token constructor initializing
    {
        type=invalid;
        token="";
        priority=-1;
    }
    Token(string s)	//The constructor to take the string 
    {
        set(s);
    }
    void set(string s)	//The setter constructor in order to determine 
    {			//The tokens
        char a;
        token = s;
        if(!s.empty())
            a=s[0];
        if((a>=65&&a<=90)||(a>=97&&a<=122))		//Using ASCII numbers to figure out the letter type 
        {
            type=letter;
            priority=4;
        }
        else if(a>=48&&a<=57)				//ASCII to determine if a number
        {
            type=integer;
            priority=4;
        }
        else if(a=='*'||a=='/'||a=='+'||a=='-')		//Expressions 	
        {
            type=op;
            if(a=='*'||a=='/')
                priority=2;
            else if(a=='+'||a=='-')
                priority=3;
        }
        else if(a=='('||a==')')				//Brackets
        {
            priority=1;
            if(a==')')
                type=closebrace;
            else
                type=openbrace;
        }
        else if(a=='=')					//Equals expression
        {
            priority=0;
            type=eq;
        }
        else
        {
            priority=-1;				//Throws an error if any other instance is detected such as negative numbers
            type=invalid;
        }
    }
    token_type get_type() const
        {return type;}
    string get_token() const
        {return token;}
    int get_priority() const
        {return priority;}
    string gettype()
    {
        switch(type)
        {
            case invalid:return "Invalid";break;
            case closebrace:return "CloseBrace";break;
            case op:return "Op";break;
            case eq:return "Eq";break;
            case openbrace:return "OpenBrace";break;
            case letter:return "Letter";break;
            case integer:return "Integer";break;
        }
    }

};
class Expression
{
private:
    string original;
    vector<Token> tokenized;
    vector<Token> postfix;      //Not used in current assignment
    bool valid;
                                //The member "Type" is not used in this current assignment
public:
    Expression()		//Default expression constructor
    {
        original="";
        valid=false;
    }
    Expression(string s)	//Building the printed out statements by printing the priority, token, and type
    {
        string str(s);
        original = str;
        int n;
        char c;
        for(n=0;n<s.length();n++)
        {
            Token t(str.substr(n,1));	
            tokenized.push_back(t);
        }
        for(n=0;n<s.length();n++)
        {
            Token t1 = tokenized[n];			
            cout<<t1.get_priority()<<" "<<t1.get_token()<<" "<<t1.gettype()<<endl;	//The print
        }
    }
    string get_original() const
    {
        return original;
    }
    vector<Token> get_tokenized() const			
    {
        return tokenized;
    }
    vector<Token> get_postfix() const
    {
        return postfix;
    }
    bool get_valid() const
    {
        return valid;
    }
                            //Exp_type is not used
};
int main()
{
    cout<<"\nFirst Test Case\n"<<endl;
    Expression("(a+b)*(4+8)");
    cout<<"\nSecond Test Case\n"<<endl;
    Expression(" (Z-)/5");
    return 0;
}
